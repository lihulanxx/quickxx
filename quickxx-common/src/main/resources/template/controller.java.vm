package ${package.Controller};

import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * ${table.comment}  前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("/${table.entityPath}")
@Api(value = "${table.comment}接口", description = "${table.comment}接口")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

	@ApiOperation("查询${table.comment}")
	@RequiresPermissions("${cfg.modulName}:${entity}:read")
	@GetMapping
	public Object query(ModelMap modelMap, @RequestBody Map<String, Object> param) {
		return super.query(modelMap, param);
	}

	@ApiOperation("${table.comment}详情")
	@RequiresPermissions("${cfg.modulName}:${entity}:read")
	@GetMapping("/{id}")
	public Object get(ModelMap modelMap, @PathVariable Long id) {
		return super.get(modelMap, id);
	}

	@ApiOperation("修改${table.comment}")
	@RequiresPermissions("${cfg.modulName}:${entity}:update")
    @PutMapping
	public Object update(ModelMap modelMap, @RequestBody ${entity} param) {
		return super.update(modelMap, param);
	}

	@ApiOperation("新增${table.comment}")
	@RequiresPermissions("${cfg.modulName}:${entity}:add")
	@PostMapping
	public Object add(ModelMap modelMap, @RequestBody ${entity} param) {
		return super.add(modelMap, param);
	}

	@ApiOperation("删除${table.comment}")
	@RequiresPermissions("${cfg.modulName}:${entity}:delete")
    @DeleteMapping("/{id}")
	public Object delete(ModelMap modelMap, @PathVariable Long id) {
		return super.delete(modelMap, id);
	}
}